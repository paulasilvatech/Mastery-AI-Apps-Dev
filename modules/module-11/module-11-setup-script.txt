#!/bin/bash

# Module 11: Microservices Architecture - Setup Script
# This script sets up the complete environment for Module 11

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banner
echo -e "${BLUE}"
echo "╔════════════════════════════════════════════╗"
echo "║   Module 11: Microservices Architecture    ║"
echo "║           Environment Setup                ║"
echo "╚════════════════════════════════════════════╝"
echo -e "${NC}"

# Check if running from correct directory
if [ ! -f "README.md" ] || [ ! -d "exercises" ]; then
    print_error "Please run this script from the module-11-microservices-architecture directory"
    exit 1
fi

print_info "Starting Module 11 setup..."

# Step 1: Check prerequisites
print_info "Checking prerequisites..."
if [ -f "./scripts/check-module-11-prerequisites.sh" ]; then
    ./scripts/check-module-11-prerequisites.sh
    if [ $? -ne 0 ]; then
        print_error "Prerequisites check failed. Please install missing requirements."
        exit 1
    fi
else
    print_warning "Prerequisites check script not found. Continuing..."
fi

# Step 2: Create Python virtual environment
print_info "Setting up Python virtual environment..."
if [ ! -d "venv" ]; then
    python3 -m venv venv
    print_success "Virtual environment created"
else
    print_info "Virtual environment already exists"
fi

# Activate virtual environment
source venv/bin/activate || source venv/Scripts/activate

# Step 3: Install Python dependencies
print_info "Installing Python dependencies..."
pip install --upgrade pip

# Create requirements.txt if it doesn't exist
if [ ! -f "requirements.txt" ]; then
    cat > requirements.txt << EOF
fastapi==0.104.1
uvicorn[standard]==0.24.0
httpx==0.25.1
pydantic[email]==2.5.0
redis==5.0.1
aio-pika==9.3.0
prometheus-client==0.19.0
opentelemetry-api==1.21.0
opentelemetry-sdk==1.21.0
opentelemetry-instrumentation-fastapi==0.42b0
asyncpg==0.29.0
sqlalchemy==2.0.23
alembic==1.13.0
pytest==7.4.3
pytest-asyncio==0.21.1
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
structlog==23.2.0
tenacity==8.2.3
circuit-breaker-py==0.0.1
aiocache==0.12.2
pydantic-settings==2.1.0
EOF
fi

pip install -r requirements.txt
print_success "Python dependencies installed"

# Step 4: Create directory structure for exercises
print_info "Creating exercise directory structure..."

for exercise in exercise1-foundation exercise2-application exercise3-mastery; do
    if [ ! -d "exercises/$exercise" ]; then
        mkdir -p "exercises/$exercise"
        print_success "Created $exercise directory"
    fi
done

# Step 5: Create shared libraries directory
print_info "Setting up shared libraries..."
mkdir -p shared/{events,cache,messaging,resilience,security,tracing}

# Create __init__.py files
find shared -type d -exec touch {}/__init__.py \;

# Step 6: Pull required Docker images
print_info "Pulling Docker images..."
docker pull python:3.11-slim
docker pull rabbitmq:3.12-management-alpine
docker pull redis:7.2-alpine
docker pull postgres:16-alpine
docker pull prom/prometheus:latest
docker pull grafana/grafana:latest

print_success "Docker images pulled"

# Step 7: Create Docker networks
print_info "Creating Docker network..."
docker network create microservices-network 2>/dev/null || print_info "Network already exists"

# Step 8: Create configuration files
print_info "Creating configuration files..."

# Create .env.example
cat > .env.example << EOF
# Module 11 Environment Variables

# Service Configuration
SERVICE_NAME=microservice
ENVIRONMENT=development
LOG_LEVEL=INFO

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/microservices
EVENT_STORE_URL=postgresql://user:password@localhost:5432/eventstore

# Redis
REDIS_URL=redis://localhost:6379

# RabbitMQ
AMQP_URL=amqp://admin:admin123@localhost:5672/

# Security
JWT_SECRET=your-secret-key-here-change-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_MINUTES=30

# Service URLs (for docker-compose)
USER_SERVICE_URL=http://user-service:8000
PRODUCT_SERVICE_URL=http://product-service:8000
ORDER_SERVICE_URL=http://order-service:8000

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
JAEGER_AGENT_HOST=localhost
JAEGER_AGENT_PORT=6831

# API Gateway
RATE_LIMIT_CALLS=100
RATE_LIMIT_PERIOD=60
EOF

# Create infrastructure directories
mkdir -p infrastructure/{monitoring,redis,rabbitmq}

# Create Prometheus configuration
cat > infrastructure/monitoring/prometheus.yml << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'microservices'
    static_configs:
      - targets:
        - 'api-gateway:8080'
        - 'user-service:8080'
        - 'product-service:8080'
        - 'order-service:8080'
        - 'notification-service:8080'
        - 'inventory-service:8080'
    metrics_path: '/metrics'
    scrape_interval: 5s

  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']

  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']
EOF

# Create Redis configuration
cat > infrastructure/redis/redis.conf << EOF
# Redis Configuration for Module 11

# Persistence
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb

# Logging
loglevel notice
logfile ""

# Security
requirepass ""
maxclients 10000

# Memory Management
maxmemory 256mb
maxmemory-policy allkeys-lru

# Performance
tcp-backlog 511
timeout 300
tcp-keepalive 60
EOF

print_success "Configuration files created"

# Step 9: Create sample docker-compose for testing
print_info "Creating sample docker-compose.yml..."
cat > docker-compose.sample.yml << EOF
version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: microservices
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: microservices
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  redis:
    image: redis:7.2-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network

networks:
  microservices-network:
    external: true

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
EOF

# Step 10: Generate exercise starter code
print_info "Generating exercise starter code..."

# Exercise 1 starter
mkdir -p exercises/exercise1-foundation/starter
cat > exercises/exercise1-foundation/starter/README.md << EOF
# Exercise 1: Foundation - Starter Code

This directory contains the starter code for Exercise 1.

## Getting Started

1. Copy this starter directory to begin your implementation
2. Follow the instructions in the exercise documentation
3. Use the provided structure as a template

## Directory Structure

\`\`\`
starter/
├── user-service/
│   └── app/
│       └── main.py
├── product-service/
│   └── app/
│       └── main.py
├── order-service/
│   └── app/
│       └── main.py
└── docker-compose.yml
\`\`\`

Good luck!
EOF

# Step 11: Verify setup
print_info "Verifying setup..."

# Check Python packages
python -c "import fastapi; print(f'FastAPI version: {fastapi.__version__}')" || print_error "FastAPI not installed correctly"

# Check Docker
docker --version || print_error "Docker not available"
docker compose version || print_error "Docker Compose not available"

# Summary
echo -e "\n${GREEN}╔════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║        Setup Completed Successfully!       ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════════╝${NC}"
echo
print_success "Module 11 environment is ready!"
echo
echo "Next steps:"
echo "1. Copy .env.example to .env and update values"
echo "2. Start infrastructure: docker compose -f docker-compose.sample.yml up -d"
echo "3. Navigate to exercises/exercise1-foundation to begin"
echo "4. Activate Python environment: source venv/bin/activate"
echo
print_info "Happy coding with microservices!"