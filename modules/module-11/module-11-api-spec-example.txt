# User Service API Specification
# OpenAPI 3.0 Example for Module 11

openapi: 3.0.3
info:
  title: User Service API
  description: Microservice for user management in the e-commerce platform
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8001
    description: Local development server
  - url: http://user-service:8000
    description: Docker service network

tags:
  - name: health
    description: Health check endpoints
  - name: users
    description: User management operations

paths:
  /health:
    get:
      tags:
        - health
      summary: Health check endpoint
      description: Returns the health status of the service
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /api/users:
    get:
      tags:
        - users
      summary: List users
      description: Retrieve a paginated list of users
      operationId: listUsers
      parameters:
        - name: skip
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{user_id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - users
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user account
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
        - service
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
          example: healthy
        service:
          type: string
          example: user-service
        timestamp:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
        version:
          type: string
          example: '1.0.0'
        checks:
          type: object
          additionalProperties:
            type: string

    UserBase:
      type: object
      required:
        - username
        - email
        - full_name
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        full_name:
          type: string
          minLength: 1
          maxLength: 100
          example: John Doe

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - password
          properties:
            password:
              type: string
              format: password
              minLength: 8
              example: SecurePassword123!

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          format: email
        full_name:
          type: string
          minLength: 1
          maxLength: 100
        password:
          type: string
          format: password
          minLength: 8

    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - id
            - created_at
          properties:
            id:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
            created_at:
              type: string
              format: date-time
              example: '2024-01-15T10:30:00Z'
            updated_at:
              type: string
              format: date-time
              example: '2024-01-15T10:30:00Z'

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: validation_error
        message:
          type: string
          example: Invalid input data
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    apiKey:
      type: apiKey
      in: header
      name: X-API-Key

# Apply security globally (can be overridden at operation level)
security:
  - bearerAuth: []
  - apiKey: []