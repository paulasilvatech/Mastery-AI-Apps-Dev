# Module 11: GitOps Workflow for Microservices
# Example GitHub Actions workflow for CI/CD

name: Microservices CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/module11

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: detect
        run: |
          # Detect which services changed
          CHANGED_SERVICES=""
          for service in user-service product-service order-service notification-service inventory-service; do
            if git diff --name-only HEAD^ HEAD | grep -q "services/$service/"; then
              CHANGED_SERVICES="$CHANGED_SERVICES $service"
            fi
          done
          
          # Convert to JSON array for matrix
          if [ -n "$CHANGED_SERVICES" ]; then
            MATRIX=$(echo $CHANGED_SERVICES | jq -Rc 'split(" ") | map(select(. != "")) | {service: .}')
            echo "services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          else
            echo "services=" >> $GITHUB_OUTPUT
            echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
          fi

  test:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov black flake8 mypy

      - name: Lint code
        working-directory: services/${{ matrix.service }}
        run: |
          black --check app/
          flake8 app/
          mypy app/ || true

      - name: Run tests
        working-directory: services/${{ matrix.service }}
        run: |
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  build:
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Update docker-compose.yml to use built images
          for service in ${{ needs.detect-changes.outputs.services }}; do
            sed -i "s|build:.*$service|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:${{ github.sha }}|g" docker-compose.yml
          done

      - name: Start services
        run: |
          docker compose up -d
          sleep 30  # Wait for services to be ready

      - name: Run integration tests
        run: |
          # Install test dependencies
          pip install pytest httpx

          # Run integration tests
          pytest tests/integration/ -v

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs
          docker compose ps

      - name: Stop services
        if: always()
        run: docker compose down

  deploy:
    needs: integration-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Update Kubernetes manifests
        run: |
          for service in ${{ needs.detect-changes.outputs.services }}; do
            kubectl set image deployment/$service $service=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:${{ github.sha }} -n microservices
          done

      - name: Wait for rollout
        run: |
          for service in ${{ needs.detect-changes.outputs.services }}; do
            kubectl rollout status deployment/$service -n microservices
          done

      - name: Run smoke tests
        run: |
          # Run basic health checks
          for service in ${{ needs.detect-changes.outputs.services }}; do
            kubectl exec -n microservices deployment/$service -- curl -f http://localhost:8000/health
          done

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  update-docs:
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate API documentation
        run: |
          # Generate OpenAPI specs
          for service in ${{ needs.detect-changes.outputs.services }}; do
            docker run --rm \
              -v $PWD:/workspace \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:${{ github.sha }} \
              python -c "from app.main import app; import json; print(json.dumps(app.openapi()))" \
              > docs/api/$service-openapi.json
          done

      - name: Commit documentation
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add docs/api/
          git diff --staged --quiet || git commit -m "Update API documentation [skip ci]"
          git push