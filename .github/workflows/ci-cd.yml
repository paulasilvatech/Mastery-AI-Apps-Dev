# CI/CD Pipeline for Mastery AI Workshop
# Supports all 30 modules with automated testing, building, and deployment

name: 🚀 Workshop CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      module_number:
        description: 'Module number to deploy (1-30)'
        required: true
        default: '1'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'
          - '8'
          - '9'
          - '10'
          - '11'
          - '12'
          - '13'
          - '14'
          - '15'
          - '16'
          - '17'
          - '18'
          - '19'
          - '20'
          - '21'
          - '22'
          - '23'
          - '24'
          - '25'
          - '26'
          - '27'
          - '28'
          - '29'
          - '30'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'prod'
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOTNET_VERSION: '8.0'
  AZURE_REGION: 'East US 2'

jobs:
  # Detect changes and set matrix
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.detect.outputs.modules }}
      infrastructure: ${{ steps.detect.outputs.infrastructure }}
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_dotnet: ${{ steps.detect.outputs.has_dotnet }}
      deploy_needed: ${{ steps.detect.outputs.deploy_needed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed modules and technologies
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "modules=[\"${{ github.event.inputs.module_number }}\"]" >> $GITHUB_OUTPUT
            echo "deploy_needed=true" >> $GITHUB_OUTPUT
          else
            # Detect changed modules
            changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
            modules=$(echo "$changed_files" | grep "^modules/" | cut -d'/' -f2 | sort -u | jq -R . | jq -s .)
            echo "modules=$modules" >> $GITHUB_OUTPUT
            
            # Check if infrastructure changed
            if echo "$changed_files" | grep -q "^infrastructure/"; then
              echo "infrastructure=true" >> $GITHUB_OUTPUT
              echo "deploy_needed=true" >> $GITHUB_OUTPUT
            else
              echo "infrastructure=false" >> $GITHUB_OUTPUT
              echo "deploy_needed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Detect technologies
          echo "has_python=true" >> $GITHUB_OUTPUT  # Python is primary language
          echo "has_node=true" >> $GITHUB_OUTPUT    # Node for agent modules
          echo "has_dotnet=true" >> $GITHUB_OUTPUT  # .NET for enterprise modules

  # Quality Gates
  quality-gate:
    name: 🛡️ Quality Gate
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ !github.event.inputs.skip_tests }}
    strategy:
      matrix:
        check: [lint, security, dependencies]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        if: needs.detect-changes.outputs.has_python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        if: needs.detect-changes.outputs.has_node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup .NET
        if: needs.detect-changes.outputs.has_dotnet == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Python dependencies
        if: needs.detect-changes.outputs.has_python == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pytest pytest-cov bandit safety

      - name: Run linting checks
        if: matrix.check == 'lint'
        run: |
          # Python linting
          if [ "${{ needs.detect-changes.outputs.has_python }}" = "true" ]; then
            echo "🔍 Running Python linting..."
            find modules -name "*.py" -exec flake8 {} \; || true
            find modules -name "*.py" -exec black --check {} \; || true
            find modules -name "*.py" -exec isort --check-only {} \; || true
          fi
          
          # JavaScript/TypeScript linting
          if [ "${{ needs.detect-changes.outputs.has_node }}" = "true" ]; then
            echo "🔍 Running JavaScript/TypeScript linting..."
            npm install -g eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
            find modules -name "*.js" -o -name "*.ts" -exec eslint {} \; || true
          fi

      - name: Run security checks
        if: matrix.check == 'security'
        run: |
          # Python security
          if [ "${{ needs.detect-changes.outputs.has_python }}" = "true" ]; then
            echo "🔒 Running Python security checks..."
            find modules -name "*.py" -exec bandit -r {} \; || true
            safety check || true
          fi
          
          # .NET security
          if [ "${{ needs.detect-changes.outputs.has_dotnet }}" = "true" ]; then
            echo "🔒 Running .NET security checks..."
            find modules -name "*.csproj" -execdir dotnet list package --vulnerable \; || true
          fi

      - name: Check dependencies
        if: matrix.check == 'dependencies'
        run: |
          # Python dependencies
          if [ "${{ needs.detect-changes.outputs.has_python }}" = "true" ]; then
            echo "📦 Checking Python dependencies..."
            find modules -name "requirements.txt" -exec pip-audit -r {} \; || true
          fi
          
          # Node dependencies
          if [ "${{ needs.detect-changes.outputs.has_node }}" = "true" ]; then
            echo "📦 Checking Node.js dependencies..."
            npm install -g npm-audit-resolver
            find modules -name "package.json" -execdir npm audit \; || true
          fi

  # Test Suite
  test-modules:
    name: 🧪 Test Modules
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gate]
    if: ${{ !github.event.inputs.skip_tests && needs.detect-changes.outputs.modules != '[]' }}
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Determine module track
        id: track
        run: |
          module_num=$(echo "${{ matrix.module }}" | grep -o '[0-9]\+' || echo "1")
          if [ $module_num -le 5 ]; then
            echo "track=fundamentals" >> $GITHUB_OUTPUT
          elif [ $module_num -le 10 ]; then
            echo "track=intermediate" >> $GITHUB_OUTPUT
          elif [ $module_num -le 15 ]; then
            echo "track=advanced" >> $GITHUB_OUTPUT
          elif [ $module_num -le 20 ]; then
            echo "track=enterprise" >> $GITHUB_OUTPUT
          elif [ $module_num -le 25 ]; then
            echo "track=ai-agents" >> $GITHUB_OUTPUT
          else
            echo "track=mastery" >> $GITHUB_OUTPUT
          fi

      - name: Install module dependencies
        run: |
          module_path="modules/${{ matrix.module }}"
          if [ -d "$module_path" ]; then
            cd "$module_path"
            
            # Python dependencies
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi
            
            # Node dependencies  
            if [ -f "package.json" ]; then
              npm install
            fi
            
            # .NET dependencies
            if [ -f "*.csproj" ]; then
              dotnet restore
            fi
          fi

      - name: Run module tests
        run: |
          module_path="modules/${{ matrix.module }}"
          if [ -d "$module_path" ]; then
            cd "$module_path"
            
            # Run validation script if exists
            if [ -f "validate.py" ]; then
              python validate.py
            fi
            
            # Run pytest if tests exist
            if [ -d "tests" ] || find . -name "*test*.py" | grep -q .; then
              pytest --cov=. --cov-report=xml
            fi
            
            # Run Node tests if exists
            if [ -f "package.json" ] && grep -q "test" package.json; then
              npm test
            fi
            
            # Run .NET tests if exists
            if find . -name "*Test*.csproj" | grep -q .; then
              dotnet test --logger trx --collect:"XPlat Code Coverage"
            fi
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.module }}
          path: |
            modules/${{ matrix.module }}/coverage.xml
            modules/${{ matrix.module }}/TestResults/
            modules/${{ matrix.module }}/test-results.xml

  # Infrastructure Validation
  validate-infrastructure:
    name: 🏗️ Validate Infrastructure
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure == 'true'
    strategy:
      matrix:
        tool: [terraform, bicep]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        if: matrix.tool == 'terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Setup Bicep
        if: matrix.tool == 'bicep'
        run: |
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep

      - name: Validate Terraform
        if: matrix.tool == 'terraform'
        run: |
          cd infrastructure/terraform
          terraform init -backend=false
          terraform validate
          terraform fmt -check

      - name: Validate Bicep
        if: matrix.tool == 'bicep'
        run: |
          cd infrastructure/bicep
          bicep build main.bicep
          find . -name "*.bicep" -exec bicep build {} \;

  # Build Artifacts
  build-artifacts:
    name: 🔨 Build Artifacts
    runs-on: ubuntu-latest
    needs: [detect-changes, test-modules]
    if: always() && (needs.test-modules.result == 'success' || needs.test-modules.result == 'skipped')
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          module_path="modules/${{ matrix.module }}"
          if [ -f "$module_path/Dockerfile" ]; then
            docker build -t workshop-${{ matrix.module }}:${{ github.sha }} $module_path
            docker save workshop-${{ matrix.module }}:${{ github.sha }} > ${{ matrix.module }}-image.tar
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.module }}
          path: |
            ${{ matrix.module }}-image.tar
            modules/${{ matrix.module }}/dist/
            modules/${{ matrix.module }}/build/

  # Deploy to Azure
  deploy:
    name: 🚀 Deploy to Azure
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-infrastructure, build-artifacts]
    if: needs.detect-changes.outputs.deploy_needed == 'true' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        run: |
          module_number="${{ github.event.inputs.module_number || '1' }}"
          environment="${{ github.event.inputs.environment || 'dev' }}"
          
          # Deploy using Bicep
          az deployment sub create \
            --name "workshop-m${module_number}-${environment}-$(date +%Y%m%d%H%M%S)" \
            --location "${{ env.AZURE_REGION }}" \
            --template-file infrastructure/bicep/main.bicep \
            --parameters \
              environment=${environment} \
              moduleNumber=${module_number} \
              location="${{ env.AZURE_REGION }}"

      - name: Deploy Applications
        run: |
          # Get resource group name
          module_number="${{ github.event.inputs.module_number || '1' }}"
          environment="${{ github.event.inputs.environment || 'dev' }}"
          
          # Deploy based on module track
          echo "Deploying applications for module ${module_number} to ${environment}"
          
          # Add specific deployment logic here based on module requirements

  # Notify Results
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [deploy, test-modules]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Workshop Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Module:** ${{ github.event.inputs.module_number || 'Auto-detected' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tests:** ${{ needs.test-modules.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify resources in Azure Portal" >> $GITHUB_STEP_SUMMARY
          echo "2. Test application endpoints" >> $GITHUB_STEP_SUMMARY
          echo "3. Begin module exercises" >> $GITHUB_STEP_SUMMARY

      - name: Notify Teams (on failure)
        if: failure()
        run: |
          echo "Deployment failed! Manual intervention may be required."
          # Add Teams webhook notification here if needed
