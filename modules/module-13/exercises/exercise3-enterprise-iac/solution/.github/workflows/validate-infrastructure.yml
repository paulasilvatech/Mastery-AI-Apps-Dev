# validate-infrastructure.yml - Complete infrastructure validation workflow

name: Validate Infrastructure

on:
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'
      - 'policies/**'
      - '.github/workflows/validate-infrastructure.yml'

env:
  TERRAFORM_VERSION: '1.6.0'
  CHECKOV_VERSION: '3.0.0'
  OPA_VERSION: '0.58.0'
  INFRACOST_VERSION: 'latest'

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
      modules-changed: ${{ steps.detect.outputs.modules-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changed environments and modules
        id: detect
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          ENVIRONMENTS=()
          MODULES_CHANGED=false
          
          # Check for environment changes
          if echo "$CHANGED_FILES" | grep -q "infrastructure/environments/dev/"; then
            ENVIRONMENTS+=("dev")
          fi
          if echo "$CHANGED_FILES" | grep -q "infrastructure/environments/staging/"; then
            ENVIRONMENTS+=("staging")
          fi
          if echo "$CHANGED_FILES" | grep -q "infrastructure/environments/prod/"; then
            ENVIRONMENTS+=("prod")
          fi
          
          # Check for module changes
          if echo "$CHANGED_FILES" | grep -q "infrastructure/modules/"; then
            MODULES_CHANGED=true
            # If modules changed, validate all environments
            ENVIRONMENTS=("dev" "staging" "prod")
          fi
          
          if [ ${#ENVIRONMENTS[@]} -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "environments=$(printf '%s\n' "${ENVIRONMENTS[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT
            echo "modules-changed=$MODULES_CHANGED" >> $GITHUB_OUTPUT
          fi

  lint-and-format:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -check -recursive infrastructure/
        continue-on-error: true
      
      - name: Post Format Check Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format Check üñå ${{ steps.fmt.outcome }}
            
            <details><summary>Format Output</summary>
            
            \`\`\`
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  validate-terraform:
    needs: [detect-changes, lint-and-format]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: terraform init -backend=false
      
      - name: Terraform Validate
        id: validate
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: terraform validate -json | jq
        continue-on-error: true
      
      - name: Post Validation Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const env = '${{ matrix.environment }}';
            const output = `#### Terraform Validation - ${env} ü§ñ ${{ steps.validate.outcome }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Checkov
        run: |
          pip install checkov==${{ env.CHECKOV_VERSION }}
      
      - name: Run Checkov Scan
        id: checkov
        run: |
          checkov -d infrastructure/ \
            --framework terraform \
            --output json \
            --output cli \
            --output-file-path checkov-report.json \
            --repo-id ${{ github.repository }} \
            --branch ${{ github.head_ref }} \
            --soft-fail
        continue-on-error: true
      
      - name: Upload Checkov Report
        uses: actions/upload-artifact@v3
        with:
          name: checkov-report
          path: checkov-report.json
      
      - name: Post Security Scan Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('checkov-report.json', 'utf8'));
            
            const summary = report.summary || {};
            const failed = summary.failed || 0;
            const passed = summary.passed || 0;
            const skipped = summary.skipped || 0;
            
            const output = `#### Security Scan Results üîí
            
            | Check | Result |
            |-------|--------|
            | Passed | ‚úÖ ${passed} |
            | Failed | ‚ùå ${failed} |
            | Skipped | ‚è≠Ô∏è ${skipped} |
            
            <details><summary>Detailed Results</summary>
            
            ${failed > 0 ? '### Failed Checks\n' + 
              report.results.failed_checks.slice(0, 5).map(check => 
                `- **${check.check_id}**: ${check.check_name}\n  File: \`${check.file_path}\`\n  Guide: ${check.guideline}`
              ).join('\n\n') : 'No failures!'}
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  policy-validation:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      
      - name: Generate Terraform Plan
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: |
          terraform init -backend=false
          terraform plan -out=tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
      
      - name: Run OPA Policy Check
        id: opa
        run: |
          # Run policy evaluation
          opa eval -d policies/azure/ \
            -i infrastructure/environments/${{ matrix.environment }}/tfplan.json \
            "data.azure.resources.deny[msg]" \
            --format json > opa-result.json
          
          # Check if there are any deny results
          DENIES=$(jq -r '.result[0].expressions[0].value | length' opa-result.json)
          if [ "$DENIES" -gt 0 ]; then
            echo "‚ùå Policy violations found:"
            jq -r '.result[0].expressions[0].value[]' opa-result.json
            exit 1
          else
            echo "‚úÖ All policies passed!"
          fi
        continue-on-error: true
      
      - name: Post Policy Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const env = '${{ matrix.environment }}';
            let output = `#### Policy Validation - ${env} üìã ${{ steps.opa.outcome }}\n\n`;
            
            if ('${{ steps.opa.outcome }}' === 'failure') {
              try {
                const opaResult = JSON.parse(fs.readFileSync('opa-result.json', 'utf8'));
                const violations = opaResult.result[0].expressions[0].value || [];
                
                if (violations.length > 0) {
                  output += '**Policy Violations:**\n';
                  violations.forEach(v => {
                    output += `- ‚ùå ${v}\n`;
                  });
                }
              } catch (e) {
                output += 'Failed to parse policy results';
              }
            } else {
              output += '‚úÖ All policies passed!';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  cost-estimation:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Infracost
        uses: infracost/setup-infracost@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          version: ${{ env.INFRACOST_VERSION }}
      
      - name: Generate Cost Estimate
        run: |
          infracost breakdown \
            --path=infrastructure/environments/${{ matrix.environment }} \
            --format=json \
            --out-file=/tmp/infracost-${{ matrix.environment }}.json
      
      - name: Post Cost Estimate
        run: |
          infracost comment github \
            --path=/tmp/infracost-${{ matrix.environment }}.json \
            --repo=${{ github.repository }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --github-token=${{ secrets.GITHUB_TOKEN }} \
            --behavior=update
          
  summary:
    needs: [validate-terraform, security-scan, policy-validation, cost-estimation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Terraform Validation', status: '${{ needs.validate-terraform.result }}' },
              { name: 'Security Scan', status: '${{ needs.security-scan.result }}' },
              { name: 'Policy Validation', status: '${{ needs.policy-validation.result }}' },
              { name: 'Cost Estimation', status: '${{ needs.cost-estimation.result }}' }
            ];
            
            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };
            
            let output = `## Infrastructure Validation Summary\n\n`;
            output += `| Check | Status |\n|-------|--------|\n`;
            
            jobs.forEach(job => {
              output += `| ${job.name} | ${getEmoji(job.status)} ${job.status} |\n`;
            });
            
            const allPassed = jobs.every(job => job.status === 'success');
            
            output += `\n### Overall Result: ${allPassed ? '‚úÖ All checks passed!' : '‚ùå Some checks failed'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            }); 