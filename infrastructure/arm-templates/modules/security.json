{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Security module for Mastery AI Workshop - provides comprehensive security and compliance"
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "metadata": {
        "description": "Environment name"
      }
    },
    "moduleNumber": {
      "type": "int",
      "minValue": 1,
      "maxValue": 30,
      "metadata": {
        "description": "Module number (1-30)"
      }
    },
    "suffix": {
      "type": "string",
      "maxLength": 8,
      "metadata": {
        "description": "Unique suffix for resource names"
      }
    },
    "adminObjectId": {
      "type": "string",
      "metadata": {
        "description": "Admin user object ID for Key Vault access"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace ID for security logs"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to resources"
      }
    }
  },
  "variables": {
    "keyVaultName": "[concat('kv-workshop-', parameters('environment'), '-', parameters('suffix'))]",
    "securityCenterName": "[concat('asc-workshop-', parameters('environment'), '-', parameters('suffix'))]",
    "sentinelName": "[concat('sentinel-workshop-', parameters('environment'), '-', parameters('suffix'))]",
    "identityName": "[concat('id-workshop-', parameters('environment'), '-', parameters('suffix'))]",
    "policyAssignmentName": "[concat('policy-workshop-', parameters('environment'), '-', parameters('suffix'))]",
    "tenantId": "[subscription().tenantId]",
    "keyVaultSku": "[if(equals(parameters('environment'), 'prod'), 'premium', 'standard')]",
    "enablePurgeProtection": "[if(equals(parameters('environment'), 'prod'), true, false)]",
    "enableSoftDelete": true,
    "softDeleteRetentionInDays": "[if(equals(parameters('environment'), 'prod'), 90, 7)]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('identityName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[variables('tenantId')]",
        "sku": {
          "family": "A",
          "name": "[variables('keyVaultSku')]"
        },
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "enableSoftDelete": "[variables('enableSoftDelete')]",
        "softDeleteRetentionInDays": "[variables('softDeleteRetentionInDays')]",
        "enablePurgeProtection": "[variables('enablePurgeProtection')]",
        "enableRbacAuthorization": true,
        "publicNetworkAccess": "Enabled",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      },
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[concat(variables('keyVaultName'), '/workshop-admin-password')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[concat('WorkshopPass-', uniqueString(resourceGroup().id, parameters('suffix')))]",
        "contentType": "text/plain",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[concat(variables('keyVaultName'), '/openai-api-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "placeholder-openai-key-configure-manually",
        "contentType": "application/x-api-key",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[concat(variables('keyVaultName'), '/github-token')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "placeholder-github-token-configure-manually",
        "contentType": "application/x-api-key",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-07-01",
      "name": "[concat(variables('keyVaultName'), '/workshop-encryption-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "kty": "RSA",
        "keySize": 2048,
        "keyOps": [
          "encrypt",
          "decrypt",
          "sign",
          "verify",
          "wrapKey",
          "unwrapKey"
        ],
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'keyVaultAdmin', parameters('adminObjectId'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "principalId": "[parameters('adminObjectId')]",
        "principalType": "User"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'keyVaultSecretsUser', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))).principalId)]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Security/pricings",
      "apiVersion": "2023-01-01",
      "name": "VirtualMachines",
      "properties": {
        "pricingTier": "[if(equals(parameters('environment'), 'prod'), 'Standard', 'Free')]"
      }
    },
    {
      "type": "Microsoft.Security/pricings",
      "apiVersion": "2023-01-01",
      "name": "AppServices",
      "properties": {
        "pricingTier": "[if(equals(parameters('environment'), 'prod'), 'Standard', 'Free')]"
      }
    },
    {
      "type": "Microsoft.Security/pricings",
      "apiVersion": "2023-01-01",
      "name": "SqlServers",
      "properties": {
        "pricingTier": "[if(equals(parameters('environment'), 'prod'), 'Standard', 'Free')]"
      }
    },
    {
      "type": "Microsoft.Security/pricings",
      "apiVersion": "2023-01-01",
      "name": "StorageAccounts",
      "properties": {
        "pricingTier": "[if(equals(parameters('environment'), 'prod'), 'Standard', 'Free')]"
      }
    },
    {
      "type": "Microsoft.Security/pricings",
      "apiVersion": "2023-01-01",
      "name": "KeyVaults",
      "properties": {
        "pricingTier": "[if(equals(parameters('environment'), 'prod'), 'Standard', 'Free')]"
      }
    },
    {
      "type": "Microsoft.Security/pricings",
      "apiVersion": "2023-01-01",
      "name": "Containers",
      "properties": {
        "pricingTier": "[if(equals(parameters('environment'), 'prod'), 'Standard', 'Free')]"
      }
    },
    {
      "type": "Microsoft.Security/securityContacts",
      "apiVersion": "2023-12-01-preview",
      "name": "default",
      "properties": {
        "emails": "[parameters('adminObjectId')]",
        "notificationsByRole": {
          "state": "On",
          "roles": [
            "Owner"
          ]
        },
        "alertNotifications": {
          "state": "On",
          "minimalSeverity": "Medium"
        }
      }
    },
    {
      "type": "Microsoft.Security/autoProvisioningSettings",
      "apiVersion": "2017-08-01-preview",
      "name": "default",
      "properties": {
        "autoProvision": "[if(equals(parameters('environment'), 'prod'), 'On', 'Off')]"
      }
    },
    {
      "type": "Microsoft.PolicyInsights/remediations",
      "apiVersion": "2021-10-01",
      "name": "[variables('policyAssignmentName')]",
      "properties": {
        "policyAssignmentId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]",
        "resourceDiscoveryMode": "ReEvaluateCompliance"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[concat(variables('keyVaultName'), '/Microsoft.Insights/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 365, 30)]"
            }
          },
          {
            "category": "AzurePolicyEvaluationDetails",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 365, 30)]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 365, 30)]"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "keyVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
    },
    "managedIdentityId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]"
    },
    "managedIdentityName": {
      "type": "string",
      "value": "[variables('identityName')]"
    },
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))).principalId]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))).clientId]"
    },
    "encryptionKeyId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'workshop-encryption-key')).keyUri]"
    },
    "securityContactEmail": {
      "type": "string",
      "value": "[parameters('adminObjectId')]"
    },
    "defenderForCloudEnabled": {
      "type": "bool",
      "value": "[if(equals(parameters('environment'), 'prod'), true, false)]"
    }
  }
}