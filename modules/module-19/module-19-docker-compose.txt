# docker-compose.yml - Complete setup for Module 19
version: '3.8'

services:
  # API Gateway - Main entry point
  api-gateway:
    build:
      context: ./services/api_gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATIONINSIGHTS_CONNECTION_STRING}
      - AZURE_LOG_ANALYTICS_WORKSPACE_ID=${AZURE_LOG_ANALYTICS_WORKSPACE_ID}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
      - SAMPLING_RATE=1.0
    depends_on:
      - order-service
      - product-service
      - user-service
      - redis
    networks:
      - monitoring-network

  # Order Service
  order-service:
    build:
      context: ./services/order_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATIONINSIGHTS_CONNECTION_STRING}
      - SERVICE_NAME=order-service
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/orders
    depends_on:
      - postgres
      - redis
    networks:
      - monitoring-network

  # Product Service
  product-service:
    build:
      context: ./services/product_service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATIONINSIGHTS_CONNECTION_STRING}
      - SERVICE_NAME=product-service
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/products
    depends_on:
      - postgres
    networks:
      - monitoring-network

  # User Service
  user-service:
    build:
      context: ./services/user_service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATIONINSIGHTS_CONNECTION_STRING}
      - SERVICE_NAME=user-service
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/users
    depends_on:
      - postgres
    networks:
      - monitoring-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=workshop
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - monitoring-network

  # Prometheus for local metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-azure-monitor-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring-network

  # Jaeger for local tracing (development)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # Thrift compact
      - "6832:6832/udp"  # Thrift binary
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./monitoring/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - monitoring-network

networks:
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

---
# .env.example - Environment variables template
# Azure Configuration
APPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=your-key;IngestionEndpoint=https://your-region.in.applicationinsights.azure.com/
AZURE_LOG_ANALYTICS_WORKSPACE_ID=your-workspace-id
AZURE_LOG_ANALYTICS_WORKSPACE_KEY=your-workspace-key
AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=your-account;AccountKey=your-key

# Application Configuration
ENVIRONMENT=development
LOG_LEVEL=INFO
APP_VERSION=1.0.0

# Feature Flags
ENABLE_TRACING=true
ENABLE_METRICS=true
ENABLE_PROFILING=false

# Performance Settings
SAMPLING_RATE=1.0
METRIC_EXPORT_INTERVAL=60
BATCH_SPAN_PROCESSOR_DELAY=5000

# Service Discovery
API_GATEWAY_URL=http://api-gateway:8000
ORDER_SERVICE_URL=http://order-service:8001
PRODUCT_SERVICE_URL=http://product-service:8002
USER_SERVICE_URL=http://user-service:8003

# Database Configuration
DATABASE_HOST=postgres
DATABASE_PORT=5432
DATABASE_USER=postgres
DATABASE_PASSWORD=password
DATABASE_NAME=workshop

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=

# Security
JWT_SECRET=your-secret-key
API_KEY=your-api-key

---
# monitoring/prometheus.yml - Prometheus configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: 'development'
    region: 'local'

scrape_configs:
  - job_name: 'api-gateway'
    static_configs:
      - targets: ['api-gateway:8000']
    metrics_path: '/metrics'

  - job_name: 'order-service'
    static_configs:
      - targets: ['order-service:8001']
    metrics_path: '/metrics'

  - job_name: 'product-service'
    static_configs:
      - targets: ['product-service:8002']
    metrics_path: '/metrics'

  - job_name: 'user-service'
    static_configs:
      - targets: ['user-service:8003']
    metrics_path: '/metrics'

  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8888']

---
# monitoring/otel-collector-config.yml - OpenTelemetry Collector configuration
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  attributes:
    actions:
      - key: environment
        value: development
        action: upsert
      - key: service.namespace
        value: workshop
        action: upsert

  resource:
    attributes:
      - key: cloud.provider
        value: azure
        action: upsert

exporters:
  # Azure Monitor Exporter
  azuremonitor:
    connection_string: ${env:APPLICATIONINSIGHTS_CONNECTION_STRING}
    
  # Prometheus Exporter
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: workshop
    
  # Jaeger Exporter (for local development)
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
      
  # Logging Exporter (for debugging)
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, attributes, resource]
      exporters: [azuremonitor, jaeger, logging]
      
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch, attributes, resource]
      exporters: [azuremonitor, prometheus]
      
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, attributes]
      exporters: [azuremonitor, logging]

  telemetry:
    logs:
      level: info
    metrics:
      level: detailed

---
# services/api_gateway/Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy shared modules
COPY ../shared /app/shared

# Copy service code
COPY . .

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]