name: Bicep Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/bicep-deployment.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_only:
        description: 'Skip validation and testing'
        required: false
        type: boolean
        default: false

env:
  BICEP_VERSION: 'v0.23.1'
  AZURE_CLI_VERSION: 'latest'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.deploy_only != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Bicep
        run: |
          # Install specific version of Bicep
          curl -Lo bicep https://github.com/Azure/bicep/releases/download/${{ env.BICEP_VERSION }}/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          bicep --version

      - name: Lint Bicep Files
        run: |
          # Find and lint all Bicep files
          find infrastructure -name "*.bicep" -type f | while read file; do
            echo "Linting: $file"
            bicep lint "$file"
          done

      - name: Build Bicep Files
        run: |
          # Build all Bicep files to ARM templates
          find infrastructure -name "*.bicep" -type f | while read file; do
            echo "Building: $file"
            bicep build "$file"
          done

      - name: Upload ARM Templates
        uses: actions/upload-artifact@v3
        with:
          name: arm-templates
          path: infrastructure/**/*.json

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.deploy_only != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: bicep
          output_format: sarif
          output_file_path: reports/checkov.sarif

      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/checkov.sarif

  plan:
    name: Plan Deployment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: |
      always() && 
      (needs.validate.result == 'success' || needs.validate.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    strategy:
      matrix:
        environment: [dev, staging, prod]
    outputs:
      dev_changes: ${{ steps.whatif.outputs.dev_changes }}
      staging_changes: ${{ steps.whatif.outputs.staging_changes }}
      prod_changes: ${{ steps.whatif.outputs.prod_changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: What-If Analysis
        id: whatif
        run: |
          # Run what-if deployment
          RESOURCE_GROUP="rg-${{ matrix.environment }}"
          TEMPLATE_FILE="infrastructure/main.bicep"
          PARAMETERS_FILE="infrastructure/parameters/${{ matrix.environment }}.parameters.json"
          
          echo "Running what-if for ${{ matrix.environment }} environment..."
          
          WHAT_IF_OUTPUT=$(az deployment group what-if \
            --resource-group $RESOURCE_GROUP \
            --template-file $TEMPLATE_FILE \
            --parameters $PARAMETERS_FILE \
            --no-pretty-print)
          
          # Save output for environment
          echo "${{ matrix.environment }}_changes<<EOF" >> $GITHUB_OUTPUT
          echo "$WHAT_IF_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with Changes
        if: github.event_name == 'pull_request' && matrix.environment == 'dev'
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Deployment Preview for ${{ matrix.environment }} üîç
            
            <details><summary>Show changes</summary>
            
            \`\`\`
            ${{ steps.whatif.outputs.dev_changes }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: plan
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Infrastructure
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: rg-dev
          template: infrastructure/main.bicep
          parameters: infrastructure/parameters/dev.parameters.json
          deploymentName: deploy-${{ github.run_number }}

      - name: Run Smoke Tests
        run: |
          # Basic connectivity tests
          ./scripts/test-infrastructure.sh dev

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Infrastructure
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: rg-staging
          template: infrastructure/main.bicep
          parameters: infrastructure/parameters/staging.parameters.json
          deploymentName: deploy-${{ github.run_number }}

      - name: Run Integration Tests
        run: |
          # Run comprehensive tests
          ./scripts/run-integration-tests.sh staging

      - name: Performance Tests
        run: |
          # Run load tests
          ./scripts/run-performance-tests.sh staging

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'prod'
    environment:
      name: production
      url: https://app.production.example.com
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Infrastructure
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: rg-prod
          template: infrastructure/main.bicep
          parameters: infrastructure/parameters/prod.parameters.json
          deploymentName: deploy-${{ github.run_number }}

      - name: Run Smoke Tests
        run: |
          # Critical path testing
          ./scripts/test-infrastructure.sh prod

      - name: Update Documentation
        run: |
          # Update deployment documentation
          echo "Deployment ${{ github.run_number }} completed at $(date)" >> deployments.log

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-dev, deploy-staging, deploy-prod]
    steps:
      - name: Determine Failed Environment
        id: failed_env
        run: |
          if [ "${{ needs.deploy-prod.result }}" == "failure" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Rollback to Previous Deployment
        run: |
          RESOURCE_GROUP="rg-${{ steps.failed_env.outputs.environment }}"
          
          # Get previous successful deployment
          PREVIOUS_DEPLOYMENT=$(az deployment group list \
            --resource-group $RESOURCE_GROUP \
            --query "[?properties.provisioningState=='Succeeded'] | [0].name" \
            -o tsv)
          
          echo "Rolling back to deployment: $PREVIOUS_DEPLOYMENT"
          
          # Resubmit previous deployment
          az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --name "rollback-${{ github.run_number }}" \
            --template-uri "$(az deployment group show \
              --resource-group $RESOURCE_GROUP \
              --name $PREVIOUS_DEPLOYMENT \
              --query properties.templateLink.uri -o tsv)"

      - name: Notify Team
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment Rollback - ${new Date().toISOString()}`,
              body: `Automatic rollback initiated for ${{ steps.failed_env.outputs.environment }} environment.
              
              Failed run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              Please investigate the failure.`,
              labels: ['incident', 'infrastructure', 'urgent']
            }) 