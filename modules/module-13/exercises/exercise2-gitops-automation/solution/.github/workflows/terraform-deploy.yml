# terraform-deploy.yml - Complete GitHub Actions workflow for Terraform deployment

name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.tf'
      - '**/*.tfvars'

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './modules/module-13/exercises/exercise2-gitops-automation/solution'

jobs:
  validate:
    name: 'Validate Configuration'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init -backend=false
      
    - name: Terraform Validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate

  plan:
    name: 'Terraform Plan'
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RG }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_SA }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=${{ matrix.environment }}.terraform.tfstate"
    
    - name: Terraform Plan
      id: plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan \
          -var-file=environments/${{ matrix.environment }}/terraform.tfvars \
          -out=${{ matrix.environment }}.tfplan \
          -detailed-exitcode
      continue-on-error: true
    
    - name: Upload Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-${{ matrix.environment }}
        path: ${{ env.TF_WORKING_DIR }}/${{ matrix.environment }}.tfplan
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan - ${{ matrix.environment }} ðŸ“–
          
          Plan Exit Code: ${{ steps.plan.outputs.exitcode }}
          
          <details><summary>Show Plan Output</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  deploy:
    name: 'Terraform Apply'
    needs: plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: [dev, staging, prod]
      max-parallel: 1
    
    environment:
      name: ${{ matrix.environment }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan-${{ matrix.environment }}
        path: ${{ env.TF_WORKING_DIR }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RG }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_SA }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=${{ matrix.environment }}.terraform.tfstate"
    
    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -auto-approve ${{ matrix.environment }}.tfplan
    
    - name: Terraform Output
      id: output
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        echo "webapp_url=$(terraform output -raw webapp_url)" >> $GITHUB_OUTPUT
    
    - name: Smoke Test
      run: |
        curl -f ${{ steps.output.outputs.webapp_url }} || exit 1
    
    - name: Notify Success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `âœ… Successfully deployed to ${{ matrix.environment }}!\n\nWebApp URL: ${{ steps.output.outputs.webapp_url }}`
          });

  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RG }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_SA }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=${{ github.event.inputs.environment }}.terraform.tfstate"
    
    - name: Terraform Destroy
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform destroy \
          -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars \
          -auto-approve 